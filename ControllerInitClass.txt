package com.yelpreviews.apiendpoint.controller;

import java.util.Map;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.stereotype.Component;

@Component
public class ControllerInit implements InitializingBean {

    int searchResultsLimit = 10;
    ControllerRouteResponseHandlers routeResponseHandlers;

    public ControllerInit(ControllerRouteResponseHandlers routeResponseHandlers, int searchResultsLimit) {
        this.searchResultsLimit = searchResultsLimit;
        this.routeResponseHandlers = routeResponseHandlers;
    }
    public ControllerInit() { 
        this(new ControllerRouteResponseHandlers(Map.of("termAndLocationSearchRoute", (yelpApi.apiCall(CallType.BUSINESS, yelpApi.getBizSearchUriBuilder(), yelpApi.getUriVars(), yelpApi.getHttpMethod()).block(), yelpApi.apiCall(CallType.REVIEWS, yelpApi.getReviewsSearchUriBuilder(), uriVarz, yelpApi.getHttpMethod()).block(), ) -> {
            // ResponseEntity<JsonNode> bizResponseEntity = yelpApi.apiCall(CallType.BUSINESS, yelpApi.getBizSearchUriBuilder(), yelpApi.getUriVars(), yelpApi.getHttpMethod()).block();

        JsonNode prefetchedBizJsonObject = bizResponseEntity.getBody();
        int count = prefetchedBizJsonObject.get("total").asInt();
        List<Map<String,?>> prefetchedBizList = (ArrayList<Map<String,?>>)JSON.jsonToObject(prefetchedBizJsonObject.get("businesses"), ArrayList.class);
                    
        List<YelpBizSearch> dataList = new ArrayList<>();
        for (Map<String,?> business : prefetchedBizList.subList(0, prefetchedBizList.size() <= controllerInit.getSearchResultsLimit() ? prefetchedBizList.size() : controllerInit.getSearchResultsLimit())) {
            Map<String, String> uriVarz = yelpApi.getUriVars();
            uriVarz.put("bizId", (String)business.get("id"));

            // ResponseEntity<JsonNode> reviewsResponseEntity = yelpApi.apiCall(CallType.REVIEWS, yelpApi.getReviewsSearchUriBuilder(), uriVarz, yelpApi.getHttpMethod()).block();

            List<YelpReview> yelpReviews = new ArrayList<YelpReview>();
            Iterator<JsonNode> reviewsArray = reviewsResponseEntity.getBody().get("reviews").iterator();
            while(reviewsArray.hasNext()) {
                yelpReviews.add(JSON.jsonToObject(reviewsArray.next(), YelpReview.class));
            }
            YelpBizSearch yelpBizSearch = JSON.jsonToObject(JSON.objectToJsonNode(business), YelpBizSearch.class);
            yelpBizSearch.setBizReviews(yelpReviews);
            dataList.add(yelpBizSearch);
        }

        YelpBizSearchList yelpBizSearchList = new YelpBizSearchList(count, controllerInit.getSearchResultsLimit(), dataList);

        return new ResponseEntity<Object>(JSON.toJson(yelpBizSearchList), HttpStatus.OK);},
        
         "businessIdSearchRoute", () -> { ResponseEntity<JsonNode> bizResponseEntity = yelpApi.apiCall(YelpApi.CallType.BUSINESS, yelpApi.getBizSearchUriBuilder(), yelpApi.getUriVars(), yelpApi.getHttpMethod()).block();
        ResponseEntity<JsonNode> reviewsResponseEntity = yelpApi.apiCall(YelpApi.CallType.REVIEWS, yelpApi.getReviewsSearchUriBuilder(), yelpApi.getUriVars(), yelpApi.getHttpMethod()).block();

        YelpBizSearch yelpBizSearch = JSON.jsonToObject(bizResponseEntity.getBody(), YelpBizSearch.class);

        List<YelpReview> yelpReviewList = new ArrayList<>(0);
        if(reviewsResponseEntity.getBody().get("reviews").isArray()) {
            Iterator<JsonNode> reviewListIter = reviewsResponseEntity.getBody().get("reviews").iterator();
                while (reviewListIter.hasNext()) {
                    yelpReviewList.add(JSON.jsonToObject(reviewListIter.next(), YelpReview.class));
                }
            yelpBizSearch.setBizReviews(yelpReviewList);
        }

        return new ResponseEntity<Object>(JSON.toJson(yelpBizSearch), HttpStatus.OK);
     } )), 
     10);
     }
    
    @Override
    public void afterPropertiesSet() throws Exception {}
    
    public void afterPropertiesSet(ControllerRouteResponseHandlers routeResponseHandlers, int searchResultsLimit) throws Exception {
        afterPropertiesSet();
        this.routeResponseHandlers = routeResponseHandlers; 
        this.searchResultsLimit = searchResultsLimit;
    }

    public int getSearchResultsLimit() {
      return searchResultsLimit;
    }
    public ControllerRouteResponseHandlers getRouteResponseHandlers() {
      return routeResponseHandlers;
    }
    public void setSearchResultsLimit(int searchResultsLimit) {
        this.searchResultsLimit = searchResultsLimit;
    }
    public void setRouteResponseHandlers(ControllerRouteResponseHandlers routeResponseHandlers) {
    this.routeResponseHandlers = routeResponseHandlers;
    }
    
}